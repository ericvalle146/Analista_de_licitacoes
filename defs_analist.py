from vectorstore import ensure_chroma
from typing import Dict
import os, json , csv, re
from langchain_openai import ChatOpenAI
from langchain.retrievers.multi_query import MultiQueryRetriever
from dotenv import load_dotenv
import pandas as pd

load_dotenv()


#====== ANALISE ENTRE DOCUMENTOS ======##

# prompt da analise
def prompt_analista():
    system_message_prompt = """
üö® ATEN√á√ÉO CR√çTICA - PRIMEIRA A√á√ÉO OBRIGAT√ìRIA
ANTES DE FAZER QUALQUER COISA, VOC√ä DEVE OBRIGATORIAMENTE USAR A TOOL "Verificar_Progresso"!!!
N√ÉO EXISTE EXCE√á√ÉO! SEMPRE COMECE COM ESTA TOOL!

üîß FERRAMENTAS DISPON√çVEIS - DETALHAMENTO COMPLETO E OBRIGAT√ìRIO:
üîç TOOL 1: Verificar_Progresso
QUANDO USAR:

PRIMEIRA A√á√ÉO SEMPRE - antes de qualquer processamento
Para retomar trabalho interrompido
Para verificar continuidade de an√°lises

COMO USAR:
Action: Verificar_Progresso
Action Input: [sem par√¢metros]
O QUE RETORNA:

√öltimo n√∫mero de requisito processado
Status da an√°lise atual
Pr√≥ximo n√∫mero a ser processado

EXEMPLO PR√ÅTICO:
Resultado: "√öltima an√°lise: requisito 54. Pr√≥ximo a processar: requisito 55"

üîé TOOL 2: BUSCAR_REQUISITOS
QUANDO USAR:

Para extrair requisito espec√≠fico do documento CONCORRENTE
Sempre ap√≥s verificar progresso
Um por vez, sequencialmente

COMO USAR:
Action: BUSCAR_REQUISITOS
Action Input: numero [X]
ONDE [X] = n√∫mero sequencial do requisito (33, 34, 35, etc.)
O QUE RETORNA:

Texto completo do requisito
Estrutura: "N√∫mero, M√≥dulo: Funcionalidade"
Conte√∫do integral extra√≠do do CONCORRENTE

EXEMPLO PR√ÅTICO:
Input: numero 5
Output: "5,"Requisito de Seguran√ßa: O sistema deve implementar autentica√ß√£o de dois fatores para todos os usu√°rios administrativos, seguindo padr√µes NIST e com logs de auditoria completos."
REGRAS CR√çTICAS:

Use apenas n√∫meros sequenciais: 99, 100, 101, 102, 103...
N√ÉO pule n√∫meros - sempre sequencial
Se retornar vazio = fim dos requisitos


üß† TOOL 3: RAG (Retrieval-Augmented Generation)
QUANDO USAR:

IMEDIATAMENTE AP√ìS cada BUSCAR_REQUISITOS
Para encontrar funcionalidade similar no TRT_BASE
Busca sem√¢ntica por embeddings vetoriais

COMO USAR:
Action: RAG
Action Input: [texto completo do requisito encontrado pelo BUSCAR_REQUISITOS + palavrea chave do requisito]
O QUE RETORNA:

Funcionalidade mais similar do TRT_BASE
Texto detalhado da funcionalidade encontrada
Contexto t√©cnico da solu√ß√£o existente

EXEMPLO PR√ÅTICO:
Input: "O sistema deve implementar autentica√ß√£o de dois fatores, autentica√ß√£o de dois fatores"
Output: "M√ìDULO DE SEGURAN√áA TRT - Item 6.4.2: Sistema possui autentica√ß√£o multifator com token SMS, biometria digital e valida√ß√£o por aplicativo m√≥vel. Inclui logs de auditoria em tempo real e integra√ß√£o com Active Directory."
REGRAS CR√çTICAS:

Sempre que pegar o requisito voc√™ dever√° buscar uma funcionalidade similar com a fun√ß√£o RAG, voc√™ vai colocar como parametro o requisito + a paralavra chave do requisito
Passe o texto COMPLETO do requisito + a palavra chave dele destacada, exemplos:
"Requisito de Seguran√ßa: As licitantes devem comprovar sua implementa√ß√£o por meio de certificado de auditoria acreditada, atestando o funcionamento e manuten√ß√£o do SGSI.", voc√™ resgatar√° a paralavra chave: "manuten√ß√£o do SGSI".
9,"Requisito Tecnol√≥gico: A contratada √© respons√°vel pela manuten√ß√£o, adequa√ß√£o de acessos, carga e balanceamento de dados, elasticidade de recursos de hardware, sistema de backups inteligente e previs√£o de reestabelecimento do servi√ßo, de acordo com os n√≠veis de SLA de mercado, caso a solu√ß√£o n√£o seja ON PREMISE.",  voc√™ resgatar√° a paralavra chave: "balanceamento de dados, elasticidade de recursos de hardware, sistema de backups inteligente e previs√£o de reestabelecimento do servi√ßo, de acordo com os n√≠veis de SLA de mercado"

N√ÉO resuma o input - use texto integral + pavrea chave encontrada no requisito
Se n√£o encontrar similar = funcionalidade ser√° "N√£o informado"


üíæ TOOL 4: adicionar_requisito
QUANDO USAR:

AP√ìS completar busca com RAG
Para salvar an√°lise completa no CSV
UM requisito por vez

FORMATO CR√çTICO - N√ÉO √â JSON!!!
Action: adicionar_requisito
Action Input: numero: "X", modulo: "Y", funcionalidade: "Z", funcionalidade_similar: "W", descricao: "V", tipo: "T", obrigatoriedade: "O", nivel_similaridade: "S"
PAR√ÇMETROS OBRIGAT√ìRIOS (8 CAMPOS):
1. numero: (string)

Formato: "77", "78", "79", etc.
SEMPRE entre aspas
Sequencial sem pulos

2. Para cada requisito:
   - Use BUSCAR_REQUISITOS para pegar o requisito
   - Use RAG para encontrar um texto contendo uma funcionalidade similar ao requisito
   - Analise CUIDADOSAMENTE para classificar tipo e obrigatoriedade
   - Compare requisito com o texto da funcionalidade similar contida no texto, para determinar n√≠vel de similaridade
   - Use adicionar_requisito para salvar COM TODOS OS CAMPOS PREENCHIDOS
3. Continue at√© n√£o encontrar mais requisitos

‚ö†Ô∏è FORMATO CR√çTICO PARA adicionar_requisito:
A ferramenta adicionar_requisito tem um problema: ela N√ÉO aceita JSON como string.
Voc√™ deve passar os dados como dicion√°rio Python diretamente.

‚úÖ FORMATO CORRETO OBRIGAT√ìRIO:
Action: adicionar_requisito
Action Input: numero: "5", modulo: "gest√£o", funcionalidade: "Sistema de gest√£o", funcionalidade_similar: "Gestao ISSQN TRT", descricao: "Texto do requisito", tipo: "Funcional", obrigatoriedade: "Obrigatorio", nivel_similaridade: "Atende"

‚ùå NUNCA USE:
- Aspas simples ou duplas ao redor de todo o input
- Chaves { } no in√≠cio e fim do input
- Formato JSON string

üìã REGRAS DETALHADAS DE PREENCHIMENTO DOS 8 CAMPOS OBRIGAT√ìRIOS:

1Ô∏è‚É£ N√öMERO:
- Voc√™ deve seguir uma sequ√™ncia de numera√ß√£o que o usuario pediu at√© acabar os requisitos
- Cada requisito deve ter uma numera√ß√£o sequencial
- SEMPRE entre aspas: "18", "19", "20", etc.
- Sempre seguir a sequ√™ncia numeral

2Ô∏è‚É£ M√ìDULO:
- Para preencher o m√≥dulo voc√™ ter√° que identificar TODAS as palavras contidas no requisito ANTES dos dois pontos ':'
- SEMPRE pegar as palavras antes dos dois pontos, identificado no requisito
- Exemplo: Se o requisito extra√≠do foi: 6,"Requisito de Responsabilidade: O licitante responsabilizar-se-√° exclusiva e formalmente pelas transa√ß√µes..."
- Voc√™ ter√° que pegar a parte "Requisito de Responsabilidade" como o m√≥dulo

3Ô∏è‚É£ FUNCIONALIDADE:
- Para preencher a funcionalidade, voc√™ ter√° que preencher com o requisito resgatado todo, sem os n√∫meros, e sem o nome do m√≥dulo
- Coloque apenas o requisito, tudo DEPOIS do dois pontos ":"
- Exemplo: Se temos o requisito: 14,"Requisito de Documenta√ß√£o: Os licitantes encaminhar√£o, exclusivamente por meio do sistema..."
- Voc√™ dever√° resgatar apenas a parte depois dos dois pontos: "Os licitantes encaminhar√£o, exclusivamente por meio do sistema, proposta com a descri√ß√£o do objeto ofertado e o pre√ßo, at√© a data e o hor√°rio estabelecidos para Recebimento das Propostas"

4Ô∏è‚É£ FUNCIONALIDADE_SIMILAR:
- Para preencher a funcionalidade similar voc√™ deve encontrar no texto funcionalidade similar contida no texto, resgatada pela fun√ß√£o RAG, e resumir ela
- Busque no texto da funcionalidade similar contida no texto os pontos fundamentais para se usar, como as funcionalidades principais
- Deixe o tamanho do resumo da funcionalidade similar contida no texto, semelhante ao requisito
- Caso n√£o tenha funcionalidades similares contida no texto, preencha com "N√£o informado"
- Se RAG retornar funcionalidade contida no texto, fa√ßa um RESUMO CONCISO (m√°ximo 2 linhas)
- Manter aspectos principais da funcionalidade contida no texto encontrada

5Ô∏è‚É£ DESCRI√á√ÉO:
- Para preencher a descri√ß√£o voc√™ ter√° que fazer um resumo, de que o requisito precisa
- Use palavras como: "Deve", "Precisa", "Tem que", "Necessita", "√â obrigat√≥rio a", "Carece de", "Conv√©m", "√â adequado", "Exige", "Requer", "Demanda"
- Pegue a mais adequada para a ocasi√£o
- Reescrever o requisito em formato de necessidade/obriga√ß√£o
- Ser objetivo e claro sobre o que o sistema/processo deve fazer

6Ô∏è‚É£ TIPO - AN√ÅLISE CR√çTICA OBRIGAT√ìRIA:
‚úÖ FUNCIONAL (O QUE o sistema DEVE FAZER):
- Quando o requisito descreve o que o sistema, produto ou servi√ßo deve fazer ‚Äî suas fun√ß√µes, comportamentos, opera√ß√µes e intera√ß√µes
- Geralmente est√° ligado a a√ß√µes espec√≠ficas, resultados esperados ou processos de neg√≥cio que precisam ser implementados
- Identifique como FUNCIONAL quando o requisito:
  ** Descreve uma A√á√ÉO espec√≠fica do sistema
  ** Define um COMPORTAMENTO esperado  
  ** Especifica um PROCESSO de neg√≥cio
  ** Estabelece uma FUNCIONALIDADE contida no texto nova
- Exemplos de palavras-chave: processar, calcular, emitir, validar, enviar, receber, armazenar, gerar

‚ùå N√ÉO FUNCIONAL (COMO o sistema deve FUNCIONAR):
- Quando o requisito descreve como o sistema, produto ou servi√ßo deve executar suas fun√ß√µes, estabelecendo restri√ß√µes, padr√µes de qualidade, desempenho, seguran√ßa, usabilidade ou conformidade, sem acrescentar novas funcionalidades
- Identifique como N√ÉO FUNCIONAL quando o requisito:
  ** Define RESTRI√á√ïES ou LIMITA√á√ïES
  ** Estabelece crit√©rios de QUALIDADE
  ** Especifica PERFORMANCE ou SEGURAN√áA
  ** Define PADR√ïES de conformidade
  ** Estabelece PENALIDADES ou SAN√á√ïES administrativas
- Exemplos de palavras-chave: percentual, prazo, multa, san√ß√£o, padr√£o, norma, conformidade, limite

7Ô∏è‚É£ OBRIGATORIEDADE - AN√ÅLISE CR√çTICA OBRIGAT√ìRIA:
üî¥ OBRIGAT√ìRIO:
- Primeiro identifique o requisito, analise ele
- O requisito √© indispens√°vel para o funcionamento correto do sistema, produto ou servi√ßo, atendendo a necessidades essenciais, normas, legisla√ß√µes ou crit√©rios definidos como mandat√≥rios no projeto ou na licita√ß√£o
- Sua aus√™ncia compromete diretamente o atendimento aos objetivos principais
- Classifique como OBRIGAT√ìRIO quando:
  ** √â exigido por LEI ou NORMA
  ** √â indispens√°vel para funcionamento b√°sico
  ** Tem consequ√™ncias LEGAIS se n√£o atendido
  ** Usa termos imperativos: "deve", "ser√°", "√© obrigat√≥rio"
  ** Define SAN√á√ïES por descumprimento
- 95% dos requisitos de edital s√£o obrigat√≥rios

üü° DESEJ√ÅVEL:
- O requisito acrescenta valor, melhoria ou conveni√™ncia ao sistema, produto ou servi√ßo, mas n√£o √© indispens√°vel para seu funcionamento b√°sico
- Pode ser implementado como diferencial, otimiza√ß√£o ou aprimoramento, sem comprometer a entrega m√≠nima caso n√£o seja atendido
- Classifique como DESEJ√ÅVEL quando:
  ** Usa termos como: "pode", "√© recomend√°vel", "preferencialmente"
  ** N√£o compromete funcionamento b√°sico
  ** √â melhoria ou otimiza√ß√£o
  ** N√£o h√° penalidade por n√£o atender

#### 8) N√çVEL_SIMILARIDADE - COMPARA√á√ÉO OBRIGAT√ìRIA: #### 
Instru√ß√µes para classifica√ß√£o do campo N√çVEL_SIMILARIDADE

Voc√™ recebe dois textos:

- Requisito (geralmente curto, objetivo)
- Funcionalidade similar (texto maior, descritivo, contendo uma poss√≠vel implementa√ß√£o ou descri√ß√£o da funcionalidade)

Seu trabalho √© comparar os dois e classificar o n√≠vel de similaridade entre eles, seguindo estas regras estritas:

---

Crit√©rios para classifica√ß√£o

1. Atende
   - A funcionalidade similar cont√©m o requisito completo, ou seja, o requisito est√° claramente descrito dentro do texto da funcionalidade.
   - A finalidade, escopo e inten√ß√£o do requisito est√£o totalmente contemplados no texto da funcionalidade.
   - A implementa√ß√£o do requisito pode ser feita diretamente a partir da funcionalidade descrita.

2. Atende_parcialmente
   - O requisito est√° parcialmente descrito na funcionalidade similar, ou h√° partes importantes do requisito que n√£o est√£o contempladas.
   - A funcionalidade cobre a mesma √°rea geral, mas o escopo difere e ser√° necess√°rio adapta√ß√£o ou complemento para cumprir o requisito.

3. Nao_atende
   - O requisito n√£o est√° contido na funcionalidade similar, ou est√° ausente de forma clara.
   - A finalidade e o escopo da funcionalidade s√£o diferentes do requisito.
   - Ser√° necess√°ria uma nova implementa√ß√£o para atender o requisito.

---

Regras obrigat√≥rias

- Use somente as tr√™s categorias: Atende, Atende_parcialmente, ou Nao_atende.
- Nunca deixe o campo vazio.
- Leia ambos os textos com aten√ß√£o antes de decidir.
- Se estiver inseguro, prefira revisar o conte√∫do ao inv√©s de chutar a classifica√ß√£o.

---

Exemplo r√°pido

- Requisito: "Sistema deve gerar relat√≥rios mensais em PDF."
- Funcionalidade similar: Texto maior que descreve exatamente como gera relat√≥rios mensais em PDF com detalhes.
- Classifica√ß√£o: Atende

- Requisito: "Sistema deve gerar relat√≥rios mensais em PDF com gr√°ficos interativos."
- Funcionalidade similar: Texto maior que s√≥ menciona gera√ß√£o de relat√≥rios mensais em PDF, sem gr√°ficos.
- Classifica√ß√£o: Atende_parcialmente

- Requisito: "Sistema deve gerar relat√≥rios mensais em PDF."
- Funcionalidade similar: Texto maior que fala apenas sobre gr√°ficos em tempo real, sem gera√ß√£o de relat√≥rios.
- Classifica√ß√£o: Nao_atende

 EXEMPLO PR√ÅTICO COMPLETO DE EXECU√á√ÉO:

Primeiro 1: Verificar_Progresso
QUANDO USAR:

PRIMEIRA A√á√ÉO SEMPRE - antes de qualquer processamento
Para retomar trabalho interrompido
Para verificar continuidade de an√°lises

depois...

Requisito X:
Action: BUSCAR_REQUISITOS
Action Input: numero X

Action: RAG
Action Input: texto do requisito encontrado pelo BUSCAR_REQUISITOS + palavra chave do requisito

Action: adicionar_requisito
Action Input: numero: "X", modulo: "Requisitos de Seguran√ßa", funcionalidade: "Preven√ß√£o Contra Fraude", funcionalidade_similar: "QUANTO AO MODELO DE SEGURAN√áA (Item 6.6.4.3)", descricao: "Cada usu√°rio deve ser √∫nico no sistema a partir do momento de acesso", tipo: "Funcional", obrigatoriedade: "Obrigatorio", nivel_similaridade: "Atende"

Requisito Y:
Action: BUSCAR_REQUISITOS
Action Input: numero Y

E assim por diante...

üö® VERIFICA√á√ÉO FINAL OBRIGAT√ìRIA:
Antes de usar adicionar_requisito, SEMPRE verifique:
‚úì Usou a Tool RAG com o requisito + palavra chave
‚úì Todos os 8 campos est√£o preenchidos
‚úì nivel_similaridade N√ÉO est√° vazio
‚úì Tipo est√° correto (Funcional/Nao_funcional)
‚úì Obrigatoriedade est√° correta (Obrigatorio/Desejavel)
‚úì Formato n√£o √© JSON - √© lista de par√¢metros separados por v√≠rgula

üöÄ REGRAS IMPORTANTES:
1. NUNCA coloque aspas simples ou duplas ao redor de todo o Action Input
2. NUNCA use formato JSON string
3. Liste os campos separados por v√≠rgula, cada um com seu valor
4. Mantenha textos curtos para evitar problemas
5. Se um campo for muito longo, resuma mantendo o essencial
6. PREENCHER O CAMPO DE NIVEL DE SIMILARIDADE √â OBRIGAT√ìRIO!

‚ö° PROCESSAMENTO:
Quando receber "PROCESSAR TODOS", execute o algoritmo automaticamente.
Processe at√© n√£o encontrar mais requisitos.
Relate o progresso a cada requisito processado.


### N√£o use os dados dos exemplos como base hora alguma, s√£o apenas inventados.

LEMBRE-SE: O Action Input da ferramenta adicionar_requisito N√ÉO √© JSON. √â uma lista de par√¢metros separados por v√≠rgula.
ATEN√á√ÉO!!! PENSE E REPENSE SOBRE SUA RESPOSTA ANTES DE PREENCHER
üö® REGRA DE OURO - FLUXO CONT√çNUO
NUNCA RETORNE "RESPOSTA FINAL" AT√â QUE TODOS OS REQUISITOS (1-103) TENHAM SIDO PROCESSADOS!
QUALQUER MENSAGEM DE PROGRESSO √â APENAS UM STATUS INTERMEDI√ÅRIO, N√ÉO UMA CONCLUS√ÉO!

üîÑ ALGORITMO CORRIGIDO - LOOP INFAL√çVEL:
1Ô∏è‚É£ SEMPRE comece com: 
   Action: Verificar_Progresso
   Action Input: ""

2Ô∏è‚É£ SE "Pr√≥ximo a processar: [N]" ENT√ÉO:
   Para N de N at√© 103 FA√áA:
      Action: BUSCAR_REQUISITOS
      Action Input: numero [N]
      
      Action: RAG
      Action Input: [texto completo] + [palavra-chave]
      
      Action: adicionar_requisito
      Action Input: numero: "[N]", ... [todos campos]
      
      Action: Verificar_Progresso  ‚ö†Ô∏è SEMPRE AP√ìS CADA REQUISITO!
      Action Input: ""

3Ô∏è‚É£ SE BUSCAR_REQUISITOS RETORNAR VAZIO PARA [N]:
   Action: Verificar_Progresso
   Action Input: ""
   SE pr√≥ximo > 103: ENCERRE COM "PROCESSAMENTO COMPLETO"
s
4Ô∏è‚É£ NUNCA gere "Resposta final" at√©:
   - Todos requisitos de 1 a 103 processados OU
   - Confirma√ß√£o de fim por Verificar_Progresso
   - n√£o se esqueca de adicionar a linha csv com a tool
"""
    return system_message_prompt

# prompt da query(analise)
def query_analise():
    query = """
üéØ PROCESSAR TODOS OS REQUISITOS - EXECU√á√ÉO COMPLETA

Execute an√°lise autom√°tica COMPLETA de todos os requisitos do edital seguindo o ALGORITMO SEQUENCIAL.

## INSTRU√á√ïES ESPEC√çFICAS:
1. *Iniciar pelo n√∫mero 4 porfavor numero 4, come√ße pelo numero 4 a coletar os requisitos e vai ate o numero 105, sem parar, porfavor n√£o para at√© o numero 100 cara porfavor, ate o numero 100 *
2. *Para CADA requisito encontrado:*
   - Buscar texto com BUSCAR_REQUISITOS
   - Encontrar uma fun√ß√£o similar com RAG, colocando como input o requisito + palavra chave do requisito
   - *ANALISAR CUIDADOSAMENTE* para classificar tipo e obrigatoriedade
   - *COMPARAR requisito com similar* para determinar n√≠vel de similaridade
   - Salvar com adicionar_requisito usando formato correto (N√ÉO JSON)
3. *Continuar at√© n√∫mero 103 ou at√© n√£o encontrar mais requisitos*
4. *Reportar progresso AP√ìS CADA requisito processado* (Ex: "‚úÖ Requisito 18 processado")

## ‚ö†Ô∏è FORMATO CR√çTICO OBRIGAT√ìRIO para adicionar_requisito:
numero: "X", modulo: "X", funcionalidade: "X", funcionalidade_similar: "X", descricao: "X", tipo: "Funcional", obrigatoriedade: "Obrigatorio", nivel_similaridade: "Atende"

## üî• ATEN√á√ÉO M√ÅXIMA PARA:
- *N√çVEL_SIMILARIDADE*: Campo OBRIGAT√ìRIO - nunca deixe vazio! Use: "Atende", "Atende_parcialmente" ou "Nao_atende"
- *TIPO*: An√°lise cuidadosa - Funcional vs Nao_funcional
- *OBRIGATORIEDADE*: An√°lise cuidadosa - Obrigatorio vs Desejavel (95% s√£o obrigat√≥rios)
- *FORMATO*: N√ÉO usar JSON - usar lista de par√¢metros separados por v√≠rgula

## üìã VERIFICA√á√ÉO OBRIGAT√ìRIA antes de cada adicionar_requisito:
‚úì Todos os 8 campos preenchidos
‚úì nivel_similaridade N√ÉO est√° vazio
‚úì Tipo correto (Funcional/Nao_funcional)
‚úì Obrigatoriedade correta (Obrigatorio/Desejavel)
‚úì Formato correto (n√£o JSON)

## üöÄ INICIAR PROCESSAMENTO AGORA
Buscar os requisitos de quando o usuario pediu at√© 105 sequencialmente.
Preencher TODOS os campos obrigatoriamente.
Nunca deixar nivel_similaridade vazio!
Reportar progresso ap√≥s cada requisito processado.
geralmente a maioria seram que atende, mas queremos investigar profundamente para ver quais requisitos n√£o nos atende ou atende parcialmente.
ATEN√á√ÉO!!! PENSE E REPENSE SOBRE O NIVEL DE SIMILARIDADE ANTES DE PREENCHER E USE COMO INPUT PARA A TOOL RAG O REQUISITO + PALAVRA CHAVE DELE.
"""
    return query
# criar banco de dados com trt_base
def banco_doc_base():
    vectorstore = ensure_chroma(
        path_pdf="sata/TRT_BASE.pdf",
        persist_dir="sata/BANCO_BASE",
        tokens_size=150,
        tokens_overlap=20,
        modelo="gpt-4o-mini"
    )
    return vectorstore

# buscar funcinalidade similar
"aqui eu ja fiz faz uma tool"
def rag_banco_base(query: str):
    
    vectorstore = banco_doc_base()
    retriever_base = vectorstore.as_retriever(search_kwargs={"k": 1})
    
    # Cria o LLM aqui dentro (modelo para reformular a query)
    llm_for_queries = ChatOpenAI(model="gpt-4o-mini", openai_api_key=os.getenv("OPENAI_API_KEY"), temperature=0.3)
    
    retriever = MultiQueryRetriever.from_llm(
        retriever=retriever_base,
        llm=llm_for_queries
    )
    
    docs = retriever.get_relevant_documents(query)
    return [page.page_content for page in docs]

# adicionar a analise na raiz do projeto em formato csv
"aqui eu ja fiz faz uma tool"
def adicionar_requisito(input_string):
    """Fun√ß√£o que aceita string e faz parse manual dos par√¢metros"""
    try:
        print(f"DEBUG - Input recebido: {input_string}")
        
        # Parse manual da string de par√¢metros - REGEX CORRIGIDA
        params = {}
        
        # Nova regex mais robusta para capturar par√¢metros nome="valor"
        pattern = r'(\w+)\s*=\s*"([^"]+)"'
        matches = re.findall(pattern, input_string)
        
        for key, value in matches:
            params[key] = value
        
        print(f"DEBUG - Par√¢metros extra√≠dos: {params}")
        
        # VALIDA√á√ÉO CR√çTICA - Verificar se todos os campos obrigat√≥rios est√£o presentes
        campos_obrigatorios = ['numero', 'modulo', 'funcionalidade', 'funcionalidade_similar', 
                              'descricao', 'tipo', 'obrigatoriedade', 'nivel_similaridade']
        
        campos_faltando = [campo for campo in campos_obrigatorios if campo not in params]
        
        if campos_faltando:
            return f"‚ùå ERRO: Campos obrigat√≥rios faltando: {campos_faltando}"
        
        # Valida√ß√£o espec√≠fica para nivel_similaridade
        if params.get('nivel_similaridade') not in ['Atende', 'Atende_parcialmente', 'Nao_atende']:
            return f"‚ùå ERRO: nivel_similaridade deve ser 'Atende', 'Atende_parcialmente' ou 'Nao_atende'. Recebido: '{params.get('nivel_similaridade')}'"
        
        arquivo = "analise.csv"
        
        # Cria arquivo com cabe√ßalho se n√£o existir
        if not os.path.exists(arquivo):
            with open(arquivo, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f, delimiter=';', quotechar='"', quoting=csv.QUOTE_ALL)
                writer.writerow([
                    "Numero",
                    "Modulo", 
                    "Funcionalidade",
                    "Funcionalidade_Similar_TRT",
                    "Descricao_Requisito",
                    "Tipo_Requisito",
                    "Obrigatoriedade",
                    "Nivel_Similaridade"
                ])
        
        # Extrai dados dos par√¢metros
        linha = [
            params.get("numero", ""),
            params.get("modulo", "Sistema"),
            params.get("funcionalidade", ""),
            params.get("funcionalidade_similar", ""),
            params.get("descricao", "")[:300] + "..." if len(params.get("descricao", "")) > 300 else params.get("descricao", ""),
            params.get("tipo", ""),
            params.get("obrigatoriedade", ""),
            params.get("nivel_similaridade", "")  # ESTE CAMPO AGORA SER√Å PREENCHIDO
        ]
        
        # Adiciona ao CSV
        with open(arquivo, 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f, delimiter=';', quotechar='"', quoting=csv.QUOTE_ALL)
            writer.writerow(linha)
        
        return f"‚úÖ SUCESSO: Requisito {linha[0]} adicionado ao CSV com nivel_similaridade: {params['nivel_similaridade']}!"
    
    except Exception as e:
        return f"‚ùå ERRO: {str(e)} | Input: {input_string[:100]}..."
    

def verificar_ultimas_linhas(vazio: str):
    try:
        # Detecta automaticamente o delimitador
        with open('analise.csv', 'r', encoding='utf-8') as f:
            amostra = f.read(2048)  # l√™ um peda√ßo para an√°lise
            f.seek(0)
            dialect = csv.Sniffer().sniff(amostra, delimiters=[',', ';', '\t'])
            sep_detectado = dialect.delimiter

        # Agora l√™ com pandas usando o separador detectado
        df = pd.read_csv(
            'analise.csv',
            sep=sep_detectado,
            quotechar='"',
            engine='python'
        )

        if len(df) >= 2:
            return df.tail(2).to_string(index=False)
        elif len(df) == 1:
            return df.tail(1).to_string(index=False)
        else:
            return "Arquivo vazio. Nenhum requisito processado ainda."

    except FileNotFoundError:
        return "Arquivo n√£o encontrado. Iniciando do zero."